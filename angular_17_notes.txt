//Smruthul
// Angular17 notes

->commands
    npm install -g @angular/cli@17
        install angular cli version 17

    ng version
        check to version of angular

    ng --help
        to check out other commands

    ng serve
        to run the application

    ng test
        to run tests written in jasmine using karma runner

->angular.json
    configuring your styles , js or for pipeline depolyments
    settings specifc to ur project

->package.json
    when run npm install the installed depandancies of the projects will be here

->package-lock.json
    same details as package.json + dev depandencies broken down in details (dont make any changes here manually)

->tsconfig.app.json
    typescript configuration (dont touch for dev purpose)

->tsconfig.spec.json
    typescript test specific configuration

->src source code

->app application/project
    .html -> templete
    .scss/.css/.less -> style
    .spec.ts -> unit test file
    .ts -> component class / logicalpiece of component

    app.component.ts
        selector -> app-root

    app.component.spec.ts
        -> unit testing
        -> Jasmine - writing the unit tests
        -> karma -> test runner

->favicon is browser icon

->Angular is a signle page application so only one html file

->app-root first componet to initatlised

->main.ts
    entry point to ur project
    which is the first component to be rendered in ur project

->styles.scss
    .css / .less / .scss extenstions of css
    global styling for this project



#Angular 17 CLI commands
--------------------------------------------------------------------------------------
    1. ng version -> gives u details of project -> packages , versions , name etc

    2. ng new <project_name> -> creates new project

    3. ng generate -> generate the required project components/modules etc etc
        component
        module
        service
        pipe
        directive
        routing
        interface
        model
        class

    4. ng test -> used to running the unit tests
        -> .spec.ts

    5. ng serve -> build and lanuch app locally

    6. ng build -> when it is production ready
        ->dist folder
            index.html
            styles.css
            polyfills.js
            main.js
        -> make changes to settings in angular.json
            -> if needed

    7. ng add @angular/material
        -> ng add for adding packages and modules of Angular

    8. ng update
        -> update any angular apllication to other versions using ng update

    9. ng lint
        -> linting making sure making typescript is proper
        -> coding syntax
        -> patterns etc


Angular 17 - Modular Architecture
----------------------------------------------------------------------------------------
    1. No more NgModule ->
    2. No more default AppModule ->
    3. Everything is standalone -> it can be injected and used anywhere
    4. Modules are still very much supported and can be used just like any previous version


Angular 17 -> Components in Angular
------------------------------------------------------------------------------------------
    1. Angular components are declared using @component decorator
    2. @component decorator can have multiple inputs/parameters
        -> selector -> itsthe name which can be used/refered in application
        -> standalone -> by default all angular apps are standalone
            -> no need to declare inside a module
            -> u can directly use them in the applications
        -> imports -> you will provide all required modules for this component
        -> templeteUrl -> HTML for the component
        -> templete -> use when you have only limited HTML
        -> styleUrl -> The CSS or stylesheet for the component
        -> styles -> define inline styling

    3. Component Structure
            <Component_name>.component.html -> templete/HTML/UI
            <Component_name>.component.css/.scss -> stylesheet for the component
            <Component_name>.component.spec.ts -> unit tests for the component
            <Component_name>.component.ts -> class for the component/logic/data/interactions

    4. By defaults all components are standalone
        -> use the, anywhere in the applications
        -> no need to inject in a module

    5. Component Data Flow
        @Input -> used for sending data to the component
        @Output -> sending data from the component

    6. Components -> Data Binding
        -> Class -> Templete -> Class

    7. Components lifecycle methods
        -> right from creation -> [8 stages] -> destory


Angular 17 -> generate components
------------------------------------------------------------------------------------------
    1. ng generate component <component_name>
        -> in angular 17 -> components are standalone by default
        -> in previous versions -> they are NOT standalone by default

    2. to disale default standalone
        ng g c <component_name> --standalone false

    3. but if you are on anyother Angular version < 17
        -> entry in module file
            AppModule

    4. The components are standalone = true by default
        -> they dont need a module
        -> otherwise u will get error

    5. angular.json ->
        adding to schematics and diasble standalone = false in angular.json


Angular 17 vs Angular 16 and below
------------------------------------------------------------------------------------------
1. Angular 16 and below used AppModule
    -> its mandatory to have atleast one module
    -> AppModule
    -> main.ts -> Bootstrap AppModule

2. Angular 17 onwards
    -> Everything is standalone
    -> no mandatory module is required
    -> no AppModule anymore
    -> but we can create our own custom Modules
    -> is backwards comaptible
        -> Everything that you were doing in angular 16 is still valid

    -> -> main.ts -> Bootstrap AppComponent

    ng g modlue <module name>

Angular 17 vs Angular 116 and below -> with no AppRoutingModule
-------------------------------------------------------------------------------------
1. angular 16 and below needed atleast 1 module
    Appmodule
    AppRoutingModule

    the routes were defined in AppRoutingModule and imported into the AppModule

    Importing AppRoutingModule into AppModule

    Appmodule -> main.ts

2. Angular 17 onwards
    App.routes.ts -> AppRoutes

    App.routes.ts -> App.config.ts

    AppConfig -> main.ts

3. can i still use RoutingModule in Angular 17?
    -> yes
    -> Angular 17 is backwards comaptible

4. ng g module <Module name> --routing


Standalone Components
---------------------------------------------------------------------------
    1. ng generate componet <component_name>
        ng g c <component_name> -> will create a new folder

        ng g c <component_name> --flat

    2. ng g c <component_name> --standalone false
        you ll need a module mandatory

        ng g c <component_name> --standalone false --module=<module_name>


How to use the components
---------------------------------------------------------------------------

1. ng g c <component_name>

2. By default each component will havre prefix -> app-componnet_name

3. Unique selector name

4. 2 Step process
    4.1 Import the components into the required components

    4.2 <component_name></component_name>

5.
        Cart -> Parent
          Products -> Child
            Product1
              Description
              Images
              Reviews
              Ratings
            Product2
          Payment
            NetBanking
            CreditCard



Component Communication
------------------------------------------------------------------------

Crew [Parent]
    Crew-Designations [Child]


AppModule
------------------------------------------------------------------------
1. By default in Angular 17 - there is no AppModule

2. Till Angular 16 -> it's mandatory to have AppModule

3. in Angular 17 supports modules ->
    -> we create our own module
    -> use just like we were using it in the earlier versions

4. In Angular 17 - we are bootstraping with AppComponent with configurations

5. Till Angular 16 -> we were bootstrapping with AppModule


Generate Modules
------------------------------------------------------------------------
1. ng g c module <module_name>

2. ng g c <component_name> -m users 

3. ng g c <component_name> -m users --standalone=false

Types of Modules
---------------------------------------------------------------------------

1. Feature Module
    Payments
    Users
    Crew
    Airlines
    Invoices

2. Shared Module
    Header
    Authentication
    Authorization
    Footer

3. Lazy loading Module
    -> ondemand
    -> Home page
        Users
    
    -> Cart / Checkout page
        Payments

Lazy loading Module
-----------------------------------------------------------------------------

1. Lazy Loading module will be loaded only when user goes to that route

2. Generate a lazy loading module
    ng g module <module> --routing

3. Inside lazy loading module we can have
    - standalone Components
    - regular component --standalone false

4.
    export const routes: Routes = [
        {
            path: 'admin',
            loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule)  //load module when required
        },
        {
            path: 'add-user',
            loadComponent: () => import('./admin/add-user/add-user.component').then(c => c.AddUserComponent), //load component of module when required
            //component: AddUserComponent  // load component of module everytime
        }
    ];


Data Binding
------------------------------------------------------------------------------------

1. One way Data Binding
    1.1 Interpolation (`{{}}`)
        From component(class) class to template(html)

    1.2 Property Binding
        From component(class) to template's element's property(attribute)

    1.3 Event Binding
        From component(class) to template's element's Event
    
2. Two Way Data Binding
    
    2.1 Data will flow from component(class) to template and back from template(html/ui) to component(class)
    2.2 You need data from user
        2.3 Forms



Interpolation
----------------------------------------------------------------------------------

1. Interpolation is a technique written in between double curly braces

    {{ }} -> inside the template

2. Data flow from component(class) to template

3. Security check for injections by escaping HTML entities


Two way data binding
--------------------------------------------------------------------------------------------
1. Two way data  flows from componet to templete and back  from template to component

2. [(ngModule)]

3. Import "FormsModule" -> Mandatory -> else you will see errors

4. We will bind ngModule to all the form fields


Signals
----------------------------------------------------------------------------------------------
1. Signal is reactive primitive to store values

2. We can update/change values in more  controlled way

3. Track changes  in the signal

4. ng g c signal

5. to define  a variable as signal -> signal 

6. Assign initial value

VariableName = signal(<initialValue);